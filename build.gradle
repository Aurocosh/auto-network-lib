buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
    }
}

plugins {
    id "com.jfrog.bintray" version "1.8.4"
    id 'com.matthewprenger.cursegradle' version '1.2.0'
}

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.forge'

repositories {
    mavenCentral()
}

//logging.level = LogLevel.DEBUG
version = "${mod_version}.${generateVersionCode()}"
//println version

group = mod_group
archivesBaseName = "${mod_archives_base_name}-${mc_sub_version}"

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = "${mc_sub_version}-${forge_version}"
    runDir = "run"
    mappings = mc_mappings
    useDepAts = true
//    makeObfSourceJar = false

    replace 'GRADLE.BUILD', '1'
    replace 'GRADLE.VERSION', mod_version
}

dependencies {

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

static def generateVersionCode() {
    def result = "git rev-list 68b2f1c29aa3c5f27992437bf6db821958890077..HEAD --count".execute().text.trim() //unix
    if(result.empty) throw new RuntimeException("Could not generate versioncode on this platform? Cmd output: ${result.text}")
    return result.toInteger()
}

static def getLastCommitMessage() {
    def result = "git log --format=%B -n 1 HEAD".execute().text.trim() //unix
    if(result.empty) throw new RuntimeException("Could not get last commit message? Cmd output: ${result.text}")
    return result
}

jar {

}

task deobfJar(type: Jar) {
    from(sourceSets.main.output)
    archiveName = "${baseName}-${version}-deobf.${extension}"
}

task srcJar(type: Jar) {
    from(sourceSets.main.java)
    classifier = 'sources'
    archiveName = "${baseName}-${version}-sources.${extension}"
}

artifacts {
    archives deobfJar, srcJar
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            groupId project.group
            artifactId project.archivesBaseName
            version project.version

            artifact deobfJar {
                classifier 'deobf'
            }
            artifact srcJar {
                classifier 'sources'
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')
    publications = ['maven']
    pkg {
        repo = 'Maven'
        name = 'AutoNetworkLib'
        licenses = ['LGPL-3.0']
        vcsUrl = 'https://github.com/Aurocosh/auto-network-lib.git'
        issueTrackerUrl = 'https://github.com/Aurocosh/auto-network-lib/issues'
        publish = true
        publicDownloadNumbers = true
        version {
            name = "AutoNetworkLib-${project.minecraft.version}-${project.version}"
            desc = 'Auto network lib'
            vcsTag = "${project.minecraft.version}-${project.version}"
        }
    }
}

curseforge {
    apiKey = System.getenv('CURSEFORGE_API_KEY') ? System.getenv('CURSEFORGE_API_KEY') : ''
    project {
        id = '323353'
        changelog = getLastCommitMessage()
        releaseType = 'beta'
    }
}